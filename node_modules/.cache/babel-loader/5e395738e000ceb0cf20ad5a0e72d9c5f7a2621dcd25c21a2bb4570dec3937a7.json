{"ast":null,"code":"import React, { useState, useEffect, useContext, useMemo, useRef, useCallback } from 'react';\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nconst GOOGLE_MAPS_API_URL = 'https://maps.googleapis.com/maps/api/js';\n/**\r\n * The Google Maps context\r\n */\nconst GoogleMapsContext = React.createContext({\n  googleMapsAPIIsLoaded: false\n});\n/**\r\n * The global Google Maps provider\r\n */\nconst GoogleMapsProvider = props => {\n  const {\n    children,\n    googleMapsAPIKey,\n    mapContainer,\n    mapOptions,\n    libraries,\n    language,\n    region,\n    version,\n    authReferrerPolicy,\n    onLoadScript,\n    onLoadMap\n  } = props;\n  const [isLoadingAPI, setIsLoadingAPI] = useState(true);\n  const [map, setMap] = useState();\n  // Handle Google Maps API loading\n  // eslint-disable-next-line complexity\n  useEffect(() => {\n    const apiLoadingFinished = () => {\n      setIsLoadingAPI(false);\n      onLoadScript && onLoadScript();\n    };\n    const defaultLanguage = navigator.language.slice(0, 2);\n    const defaultRegion = navigator.language.slice(3, 5);\n    /* eslint-disable camelcase */\n    const params = new URLSearchParams(_extends({\n      key: googleMapsAPIKey,\n      language: language || defaultLanguage,\n      region: region || defaultRegion\n    }, (libraries == null ? void 0 : libraries.length) && {\n      libraries: libraries.join(',')\n    }, version && {\n      v: version\n    }, authReferrerPolicy && {\n      auth_referrer_policy: authReferrerPolicy\n    }));\n    /* eslint-enable camelcase */\n    const existingScriptTag = document.querySelector(`script[src^=\"${GOOGLE_MAPS_API_URL}\"]`);\n    // Check if Google Maps API was loaded with the passed parameters\n    if (existingScriptTag) {\n      const loadedURL = new URL(existingScriptTag.src);\n      const loadedParams = loadedURL.searchParams.toString();\n      const passedParams = params.toString();\n      if (loadedParams !== passedParams) {\n        console.error('The Google Maps API Parameters passed to the `GoogleMapsProvider` components do not match. The Google Maps API can only be loaded once. Please make sure to pass the same API parameters to all of your `GoogleMapsProvider` components.', '\\n\\nExpected parameters:', Object.fromEntries(loadedURL.searchParams), '\\n\\nReceived parameters:', Object.fromEntries(params));\n      }\n    }\n    if (typeof google === 'object' && typeof google.maps === 'object') {\n      // Google Maps API is already loaded\n      apiLoadingFinished();\n    } else if (existingScriptTag) {\n      // Google Maps API is already loading\n      setIsLoadingAPI(true);\n      const onload = existingScriptTag.onload;\n      existingScriptTag.onload = event => {\n        onload == null ? void 0 : onload.call(existingScriptTag, event);\n        apiLoadingFinished();\n      };\n    } else {\n      // Load Google Maps API\n      setIsLoadingAPI(true);\n      // Add google maps callback\n      window.mapsCallback = () => {\n        apiLoadingFinished();\n      };\n      params.set('callback', 'mapsCallback');\n      const scriptTag = document.createElement('script');\n      scriptTag.type = 'text/javascript';\n      scriptTag.src = `${GOOGLE_MAPS_API_URL}?${params.toString()}`;\n      document.getElementsByTagName('head')[0].appendChild(scriptTag);\n    }\n    // Clean up Google Maps API\n    return () => {\n      // Remove all loaded Google Maps API scripts\n      document.querySelectorAll('script[src^=\"https://maps.googleapis.com\"]').forEach(script => {\n        script.remove();\n      });\n      // Remove google.maps global\n      if (typeof google === 'object' && typeof google.maps === 'object') {\n        // @ts-ignore: The operand of a 'delete' operator must be optional.\n        delete google.maps;\n      }\n    };\n  }, [googleMapsAPIKey, JSON.stringify(libraries), language, region, version, authReferrerPolicy]);\n  // Handle Google Maps map instance\n  useEffect(() => {\n    // Check for google.maps is needed because of Hot Module Replacement\n    if (isLoadingAPI || !mapContainer || !(typeof google === 'object' && typeof google.maps === 'object')) {\n      return () => {};\n    }\n    const newMap = new google.maps.Map(mapContainer, mapOptions);\n    google.maps.event.addListenerOnce(newMap, 'idle', () => {\n      if (onLoadMap && newMap) {\n        onLoadMap(newMap);\n      }\n    });\n    setMap(newMap);\n    // Remove all map related event listeners\n    return () => {\n      if (newMap && typeof google === 'object' && typeof google.maps === 'object') {\n        google.maps.event.clearInstanceListeners(newMap);\n      }\n    };\n  }, [isLoadingAPI, mapContainer]);\n  return /*#__PURE__*/React.createElement(GoogleMapsContext.Provider, {\n    value: {\n      map,\n      googleMapsAPIIsLoaded: !isLoadingAPI\n    }\n  }, children);\n};\n\n/**\r\n * Hook to get Google Maps Autocomplete Service instance\r\n */\nconst useAutocompleteService = () => {\n  const {\n    googleMapsAPIIsLoaded\n  } = useContext(GoogleMapsContext);\n  // Creates an Autocomplete Service instance\n  const autocompleteService = useMemo(() => {\n    // Wait for Google Maps API to be loaded\n    if (!googleMapsAPIIsLoaded) {\n      return null;\n    }\n    if (!google.maps.places) {\n      throw Error(\"Places library missing. Add 'places' to the libraries array of GoogleMapsProvider.\");\n    }\n    return new google.maps.places.AutocompleteService();\n  }, [googleMapsAPIIsLoaded]);\n  return autocompleteService;\n};\n\n/**\r\n * Hook to get a Google Maps Places Autocomplete instance\r\n * monitoring an input field\r\n */\nconst useAutocomplete = props => {\n  const {\n    inputField,\n    options,\n    onPlaceChanged\n  } = props;\n  const placeChangedHandler = useRef(onPlaceChanged);\n  const {\n    googleMapsAPIIsLoaded\n  } = useContext(GoogleMapsContext);\n  const [autocomplete, setAutocomplete] = useState(null);\n  // Initializes the Google Maps Places Autocomplete\n  useEffect(() => {\n    // Wait for the Google Maps API and input element to be initialized\n    if (!googleMapsAPIIsLoaded || !inputField) {\n      return () => {};\n    }\n    if (!google.maps.places) {\n      throw Error(\"Autocomplete library missing. Add 'places' to the libraries array of GoogleMapsProvider.\");\n    }\n    // Create Autocomplete instance\n    const autocompleteInstance = new google.maps.places.Autocomplete(inputField, options);\n    setAutocomplete(autocompleteInstance);\n    // Add places change listener to Autocomplete\n    autocompleteInstance.addListener('place_changed', () => {\n      const place = autocompleteInstance.getPlace();\n      placeChangedHandler.current && placeChangedHandler.current(place);\n    });\n    // Clear listeners on unmount\n    return () => {\n      autocompleteInstance && google.maps.event.clearInstanceListeners(autocompleteInstance);\n    };\n  }, [googleMapsAPIIsLoaded, inputField, options]);\n  return autocomplete;\n};\n\n/**\r\n * Hook to get Google Maps Places Directions Service instance\r\n */\nconst useDirectionsService = (props = {}) => {\n  const {\n    renderOnMap,\n    renderOptions\n  } = props;\n  const {\n    googleMapsAPIIsLoaded,\n    map\n  } = useContext(GoogleMapsContext);\n  // Creates a Directions Service instance\n  const directionsService = useMemo(() => {\n    // Wait for Google Maps API to be loaded\n    if (!googleMapsAPIIsLoaded) {\n      return null;\n    }\n    return new google.maps.DirectionsService();\n  }, [googleMapsAPIIsLoaded]);\n  // Creates a Directions Renderer instance\n  const directionsRenderer = useMemo(() => {\n    // Wait for map to be initialized\n    if (!map || !renderOnMap) {\n      return null;\n    }\n    const renderer = new google.maps.DirectionsRenderer(renderOptions);\n    renderer.setMap(map);\n    return renderer;\n  }, [map, renderOnMap]);\n  // Updates the directions renderer options\n  useEffect(() => {\n    if (!directionsRenderer) {\n      return;\n    }\n    directionsRenderer.setOptions(renderOptions || {});\n  }, [renderOptions]);\n  // Custom Directions route request\n  const findRoute = useCallback(request => new Promise((resolve, reject) => {\n    if (directionsService) {\n      directionsService.route(request, (result, status) => {\n        if (status !== google.maps.DirectionsStatus.OK || !result) {\n          reject(status);\n        } else {\n          resolve(result);\n        }\n      });\n    }\n  }), [directionsService]);\n  // Custom Directions route request followed by directions rendering\n  const findAndRenderRoute = useCallback(request => new Promise((resolve, reject) => {\n    if (directionsService) {\n      directionsService.route(request, (result, status) => {\n        if (status !== google.maps.DirectionsStatus.OK || !result) {\n          reject(status);\n        } else {\n          if (directionsRenderer) {\n            directionsRenderer.setDirections(result);\n          }\n          resolve(result);\n        }\n      });\n    }\n  }), [directionsService, directionsRenderer]);\n  // Renders directions route of given index\n  const renderRouteOfIndex = index => {\n    if (directionsRenderer) {\n      directionsRenderer.setRouteIndex(index);\n    }\n  };\n  return {\n    directionsService,\n    directionsRenderer,\n    findRoute: directionsService && findRoute,\n    findAndRenderRoute: directionsService && directionsRenderer && findAndRenderRoute,\n    renderRouteOfIndex\n  };\n};\n\n/**\r\n * Hook to get Distance Matrix Service instance\r\n */\nconst useDistanceMatrixService = () => {\n  const {\n    googleMapsAPIIsLoaded\n  } = useContext(GoogleMapsContext);\n  // Creates a Distance Matrix Service instance\n  const distanceMatrixService = useMemo(() => {\n    // Wait for Google Maps API to be loaded\n    if (!googleMapsAPIIsLoaded) {\n      return null;\n    }\n    if (!google.maps.DistanceMatrixService) {\n      throw Error('Distance Matrix library missing.');\n    }\n    return new google.maps.DistanceMatrixService();\n  }, [googleMapsAPIIsLoaded]);\n  return distanceMatrixService;\n};\n\n/**\r\n * Hook to get Elevation Service instance\r\n */\nconst useElevationService = () => {\n  const {\n    googleMapsAPIIsLoaded\n  } = useContext(GoogleMapsContext);\n  // Creates an Elevation Service instance\n  const elevationService = useMemo(() => {\n    // Wait for Google Maps API to be loaded\n    if (!googleMapsAPIIsLoaded) {\n      return null;\n    }\n    return new google.maps.ElevationService();\n  }, [googleMapsAPIIsLoaded]);\n  return elevationService;\n};\n\n/**\r\n * Hook to get Google Maps Geocoder instance\r\n */\nconst useGeocodingService = () => {\n  const {\n    googleMapsAPIIsLoaded\n  } = useContext(GoogleMapsContext);\n  // Creates a Geocoder instance\n  const geocoder = useMemo(() => {\n    // Wait for Google Maps API to be loaded\n    if (!googleMapsAPIIsLoaded) {\n      return null;\n    }\n    return new google.maps.Geocoder();\n  }, [googleMapsAPIIsLoaded]);\n  return geocoder;\n};\n\n/**\r\n * Hook to get global map instance\r\n */\nconst useGoogleMap = () => useContext(GoogleMapsContext).map;\n\n/**\r\n * Hook to get Max Zoom Service instance\r\n */\nconst useMaxZoomService = () => {\n  const {\n    googleMapsAPIIsLoaded\n  } = useContext(GoogleMapsContext);\n  // Creates a Max Zoom Service instance\n  const maxZoomService = useMemo(() => {\n    // Wait for Google Maps API to be loaded\n    if (!googleMapsAPIIsLoaded) {\n      return null;\n    }\n    return new google.maps.MaxZoomService();\n  }, [googleMapsAPIIsLoaded]);\n  return maxZoomService;\n};\n\n/**\r\n * Hook to get Google Maps Places Service instance\r\n */\nconst usePlacesService = props => {\n  const {\n    map,\n    googleMapsAPIIsLoaded\n  } = useContext(GoogleMapsContext);\n  const [placesService, setPlacesService] = useState(null);\n  // Creates a Places Service instance\n  useEffect(() => {\n    if (!googleMapsAPIIsLoaded) {\n      return;\n    }\n    if (!google.maps.places) {\n      throw Error(\"Places library missing. Add 'places' to the libraries array of GoogleMapsProvider.\");\n    }\n    // Create places service which renders attributions in the map container\n    if ((props == null ? void 0 : props.divElement) === undefined) {\n      // Wait for map to be initialized\n      if (!map) {\n        return;\n      }\n      const serviceMap = new google.maps.places.PlacesService(map);\n      setPlacesService(serviceMap);\n      return;\n    }\n    // Create places service which renders attributions in the passed div element\n    // Wait for div element to be available\n    if (!(props != null && props.divElement)) {\n      return;\n    }\n    const serviceElement = new google.maps.places.PlacesService(props == null ? void 0 : props.divElement);\n    setPlacesService(serviceElement);\n  }, [googleMapsAPIIsLoaded, map, props == null ? void 0 : props.divElement]);\n  return placesService;\n};\n\n/* eslint-disable complexity */\n/**\r\n * Hook to get Street View Panorama\r\n */\nconst useStreetViewPanorama = props => {\n  const {\n    divElement,\n    position,\n    pov,\n    zoom\n  } = props;\n  const {\n    googleMapsAPIIsLoaded,\n    map\n  } = useContext(GoogleMapsContext);\n  const [streetViewPanorama, setStreetViewPanorama] = useState(null);\n  // Creates a Street View instance\n  useEffect(() => {\n    // If no div element is passed, initialize a map with Street View Panorama\n    if (!divElement) {\n      // Wait for Google Maps map instance\n      if (!map) {\n        return () => {};\n      }\n      const newPanorama = map.getStreetView();\n      if (pov) {\n        newPanorama.setPov(pov);\n      }\n      if (position) {\n        newPanorama.setPosition(position);\n      }\n      // eslint-disable-next-line no-eq-null\n      if (zoom != null) {\n        newPanorama.setZoom(zoom);\n      }\n      setStreetViewPanorama(newPanorama);\n    } else {\n      // Wait for Google Maps API\n      if (!googleMapsAPIIsLoaded) {\n        return () => {};\n      }\n      // If a div element is passed, initialize street view in the element\n      const newPanorama = new google.maps.StreetViewPanorama(divElement, {\n        position,\n        pov,\n        zoom\n      });\n      setStreetViewPanorama(newPanorama);\n    }\n    return () => {\n      if (!divElement && map) {\n        map.setStreetView(null);\n      }\n    };\n  }, [map, divElement]);\n  return streetViewPanorama;\n};\nexport { GoogleMapsContext, GoogleMapsProvider, useAutocomplete, useAutocompleteService, useDirectionsService, useDistanceMatrixService, useElevationService, useGeocodingService, useGoogleMap, useMaxZoomService, usePlacesService, useStreetViewPanorama };","map":{"version":3,"names":["React","useState","useEffect","useContext","useMemo","useRef","useCallback","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","GOOGLE_MAPS_API_URL","GoogleMapsContext","createContext","googleMapsAPIIsLoaded","GoogleMapsProvider","props","children","googleMapsAPIKey","mapContainer","mapOptions","libraries","language","region","version","authReferrerPolicy","onLoadScript","onLoadMap","isLoadingAPI","setIsLoadingAPI","map","setMap","apiLoadingFinished","defaultLanguage","navigator","slice","defaultRegion","params","URLSearchParams","join","v","auth_referrer_policy","existingScriptTag","document","querySelector","loadedURL","URL","src","loadedParams","searchParams","toString","passedParams","console","error","fromEntries","google","maps","onload","event","window","mapsCallback","set","scriptTag","createElement","type","getElementsByTagName","appendChild","querySelectorAll","forEach","script","remove","JSON","stringify","newMap","Map","addListenerOnce","clearInstanceListeners","Provider","value","useAutocompleteService","autocompleteService","places","Error","AutocompleteService","useAutocomplete","inputField","options","onPlaceChanged","placeChangedHandler","autocomplete","setAutocomplete","autocompleteInstance","Autocomplete","addListener","place","getPlace","current","useDirectionsService","renderOnMap","renderOptions","directionsService","DirectionsService","directionsRenderer","renderer","DirectionsRenderer","setOptions","findRoute","request","Promise","resolve","reject","route","result","status","DirectionsStatus","OK","findAndRenderRoute","setDirections","renderRouteOfIndex","index","setRouteIndex","useDistanceMatrixService","distanceMatrixService","DistanceMatrixService","useElevationService","elevationService","ElevationService","useGeocodingService","geocoder","Geocoder","useGoogleMap","useMaxZoomService","maxZoomService","MaxZoomService","usePlacesService","placesService","setPlacesService","divElement","undefined","serviceMap","PlacesService","serviceElement","useStreetViewPanorama","position","pov","zoom","streetViewPanorama","setStreetViewPanorama","newPanorama","getStreetView","setPov","setPosition","setZoom","StreetViewPanorama","setStreetView"],"sources":["/Users/bookstore/Desktop/krmentor/material-dashboard-material-ui-v4/node_modules/@ubilabs/google-maps-react-hooks/dist/index.modern.mjs"],"sourcesContent":["import React, { useState, useEffect, useContext, useMemo, useRef, useCallback } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nconst GOOGLE_MAPS_API_URL = 'https://maps.googleapis.com/maps/api/js';\n/**\r\n * The Google Maps context\r\n */\nconst GoogleMapsContext = React.createContext({\n  googleMapsAPIIsLoaded: false\n});\n/**\r\n * The global Google Maps provider\r\n */\nconst GoogleMapsProvider = props => {\n  const {\n    children,\n    googleMapsAPIKey,\n    mapContainer,\n    mapOptions,\n    libraries,\n    language,\n    region,\n    version,\n    authReferrerPolicy,\n    onLoadScript,\n    onLoadMap\n  } = props;\n  const [isLoadingAPI, setIsLoadingAPI] = useState(true);\n  const [map, setMap] = useState();\n  // Handle Google Maps API loading\n  // eslint-disable-next-line complexity\n  useEffect(() => {\n    const apiLoadingFinished = () => {\n      setIsLoadingAPI(false);\n      onLoadScript && onLoadScript();\n    };\n    const defaultLanguage = navigator.language.slice(0, 2);\n    const defaultRegion = navigator.language.slice(3, 5);\n    /* eslint-disable camelcase */\n    const params = new URLSearchParams(_extends({\n      key: googleMapsAPIKey,\n      language: language || defaultLanguage,\n      region: region || defaultRegion\n    }, (libraries == null ? void 0 : libraries.length) && {\n      libraries: libraries.join(',')\n    }, version && {\n      v: version\n    }, authReferrerPolicy && {\n      auth_referrer_policy: authReferrerPolicy\n    }));\n    /* eslint-enable camelcase */\n    const existingScriptTag = document.querySelector(`script[src^=\"${GOOGLE_MAPS_API_URL}\"]`);\n    // Check if Google Maps API was loaded with the passed parameters\n    if (existingScriptTag) {\n      const loadedURL = new URL(existingScriptTag.src);\n      const loadedParams = loadedURL.searchParams.toString();\n      const passedParams = params.toString();\n      if (loadedParams !== passedParams) {\n        console.error('The Google Maps API Parameters passed to the `GoogleMapsProvider` components do not match. The Google Maps API can only be loaded once. Please make sure to pass the same API parameters to all of your `GoogleMapsProvider` components.', '\\n\\nExpected parameters:', Object.fromEntries(loadedURL.searchParams), '\\n\\nReceived parameters:', Object.fromEntries(params));\n      }\n    }\n    if (typeof google === 'object' && typeof google.maps === 'object') {\n      // Google Maps API is already loaded\n      apiLoadingFinished();\n    } else if (existingScriptTag) {\n      // Google Maps API is already loading\n      setIsLoadingAPI(true);\n      const onload = existingScriptTag.onload;\n      existingScriptTag.onload = event => {\n        onload == null ? void 0 : onload.call(existingScriptTag, event);\n        apiLoadingFinished();\n      };\n    } else {\n      // Load Google Maps API\n      setIsLoadingAPI(true);\n      // Add google maps callback\n      window.mapsCallback = () => {\n        apiLoadingFinished();\n      };\n      params.set('callback', 'mapsCallback');\n      const scriptTag = document.createElement('script');\n      scriptTag.type = 'text/javascript';\n      scriptTag.src = `${GOOGLE_MAPS_API_URL}?${params.toString()}`;\n      document.getElementsByTagName('head')[0].appendChild(scriptTag);\n    }\n    // Clean up Google Maps API\n    return () => {\n      // Remove all loaded Google Maps API scripts\n      document.querySelectorAll('script[src^=\"https://maps.googleapis.com\"]').forEach(script => {\n        script.remove();\n      });\n      // Remove google.maps global\n      if (typeof google === 'object' && typeof google.maps === 'object') {\n        // @ts-ignore: The operand of a 'delete' operator must be optional.\n        delete google.maps;\n      }\n    };\n  }, [googleMapsAPIKey, JSON.stringify(libraries), language, region, version, authReferrerPolicy]);\n  // Handle Google Maps map instance\n  useEffect(() => {\n    // Check for google.maps is needed because of Hot Module Replacement\n    if (isLoadingAPI || !mapContainer || !(typeof google === 'object' && typeof google.maps === 'object')) {\n      return () => {};\n    }\n    const newMap = new google.maps.Map(mapContainer, mapOptions);\n    google.maps.event.addListenerOnce(newMap, 'idle', () => {\n      if (onLoadMap && newMap) {\n        onLoadMap(newMap);\n      }\n    });\n    setMap(newMap);\n    // Remove all map related event listeners\n    return () => {\n      if (newMap && typeof google === 'object' && typeof google.maps === 'object') {\n        google.maps.event.clearInstanceListeners(newMap);\n      }\n    };\n  }, [isLoadingAPI, mapContainer]);\n  return /*#__PURE__*/React.createElement(GoogleMapsContext.Provider, {\n    value: {\n      map,\n      googleMapsAPIIsLoaded: !isLoadingAPI\n    }\n  }, children);\n};\n\n/**\r\n * Hook to get Google Maps Autocomplete Service instance\r\n */\nconst useAutocompleteService = () => {\n  const {\n    googleMapsAPIIsLoaded\n  } = useContext(GoogleMapsContext);\n  // Creates an Autocomplete Service instance\n  const autocompleteService = useMemo(() => {\n    // Wait for Google Maps API to be loaded\n    if (!googleMapsAPIIsLoaded) {\n      return null;\n    }\n    if (!google.maps.places) {\n      throw Error(\"Places library missing. Add 'places' to the libraries array of GoogleMapsProvider.\");\n    }\n    return new google.maps.places.AutocompleteService();\n  }, [googleMapsAPIIsLoaded]);\n  return autocompleteService;\n};\n\n/**\r\n * Hook to get a Google Maps Places Autocomplete instance\r\n * monitoring an input field\r\n */\nconst useAutocomplete = props => {\n  const {\n    inputField,\n    options,\n    onPlaceChanged\n  } = props;\n  const placeChangedHandler = useRef(onPlaceChanged);\n  const {\n    googleMapsAPIIsLoaded\n  } = useContext(GoogleMapsContext);\n  const [autocomplete, setAutocomplete] = useState(null);\n  // Initializes the Google Maps Places Autocomplete\n  useEffect(() => {\n    // Wait for the Google Maps API and input element to be initialized\n    if (!googleMapsAPIIsLoaded || !inputField) {\n      return () => {};\n    }\n    if (!google.maps.places) {\n      throw Error(\"Autocomplete library missing. Add 'places' to the libraries array of GoogleMapsProvider.\");\n    }\n    // Create Autocomplete instance\n    const autocompleteInstance = new google.maps.places.Autocomplete(inputField, options);\n    setAutocomplete(autocompleteInstance);\n    // Add places change listener to Autocomplete\n    autocompleteInstance.addListener('place_changed', () => {\n      const place = autocompleteInstance.getPlace();\n      placeChangedHandler.current && placeChangedHandler.current(place);\n    });\n    // Clear listeners on unmount\n    return () => {\n      autocompleteInstance && google.maps.event.clearInstanceListeners(autocompleteInstance);\n    };\n  }, [googleMapsAPIIsLoaded, inputField, options]);\n  return autocomplete;\n};\n\n/**\r\n * Hook to get Google Maps Places Directions Service instance\r\n */\nconst useDirectionsService = (props = {}) => {\n  const {\n    renderOnMap,\n    renderOptions\n  } = props;\n  const {\n    googleMapsAPIIsLoaded,\n    map\n  } = useContext(GoogleMapsContext);\n  // Creates a Directions Service instance\n  const directionsService = useMemo(() => {\n    // Wait for Google Maps API to be loaded\n    if (!googleMapsAPIIsLoaded) {\n      return null;\n    }\n    return new google.maps.DirectionsService();\n  }, [googleMapsAPIIsLoaded]);\n  // Creates a Directions Renderer instance\n  const directionsRenderer = useMemo(() => {\n    // Wait for map to be initialized\n    if (!map || !renderOnMap) {\n      return null;\n    }\n    const renderer = new google.maps.DirectionsRenderer(renderOptions);\n    renderer.setMap(map);\n    return renderer;\n  }, [map, renderOnMap]);\n  // Updates the directions renderer options\n  useEffect(() => {\n    if (!directionsRenderer) {\n      return;\n    }\n    directionsRenderer.setOptions(renderOptions || {});\n  }, [renderOptions]);\n  // Custom Directions route request\n  const findRoute = useCallback(request => new Promise((resolve, reject) => {\n    if (directionsService) {\n      directionsService.route(request, (result, status) => {\n        if (status !== google.maps.DirectionsStatus.OK || !result) {\n          reject(status);\n        } else {\n          resolve(result);\n        }\n      });\n    }\n  }), [directionsService]);\n  // Custom Directions route request followed by directions rendering\n  const findAndRenderRoute = useCallback(request => new Promise((resolve, reject) => {\n    if (directionsService) {\n      directionsService.route(request, (result, status) => {\n        if (status !== google.maps.DirectionsStatus.OK || !result) {\n          reject(status);\n        } else {\n          if (directionsRenderer) {\n            directionsRenderer.setDirections(result);\n          }\n          resolve(result);\n        }\n      });\n    }\n  }), [directionsService, directionsRenderer]);\n  // Renders directions route of given index\n  const renderRouteOfIndex = index => {\n    if (directionsRenderer) {\n      directionsRenderer.setRouteIndex(index);\n    }\n  };\n  return {\n    directionsService,\n    directionsRenderer,\n    findRoute: directionsService && findRoute,\n    findAndRenderRoute: directionsService && directionsRenderer && findAndRenderRoute,\n    renderRouteOfIndex\n  };\n};\n\n/**\r\n * Hook to get Distance Matrix Service instance\r\n */\nconst useDistanceMatrixService = () => {\n  const {\n    googleMapsAPIIsLoaded\n  } = useContext(GoogleMapsContext);\n  // Creates a Distance Matrix Service instance\n  const distanceMatrixService = useMemo(() => {\n    // Wait for Google Maps API to be loaded\n    if (!googleMapsAPIIsLoaded) {\n      return null;\n    }\n    if (!google.maps.DistanceMatrixService) {\n      throw Error('Distance Matrix library missing.');\n    }\n    return new google.maps.DistanceMatrixService();\n  }, [googleMapsAPIIsLoaded]);\n  return distanceMatrixService;\n};\n\n/**\r\n * Hook to get Elevation Service instance\r\n */\nconst useElevationService = () => {\n  const {\n    googleMapsAPIIsLoaded\n  } = useContext(GoogleMapsContext);\n  // Creates an Elevation Service instance\n  const elevationService = useMemo(() => {\n    // Wait for Google Maps API to be loaded\n    if (!googleMapsAPIIsLoaded) {\n      return null;\n    }\n    return new google.maps.ElevationService();\n  }, [googleMapsAPIIsLoaded]);\n  return elevationService;\n};\n\n/**\r\n * Hook to get Google Maps Geocoder instance\r\n */\nconst useGeocodingService = () => {\n  const {\n    googleMapsAPIIsLoaded\n  } = useContext(GoogleMapsContext);\n  // Creates a Geocoder instance\n  const geocoder = useMemo(() => {\n    // Wait for Google Maps API to be loaded\n    if (!googleMapsAPIIsLoaded) {\n      return null;\n    }\n    return new google.maps.Geocoder();\n  }, [googleMapsAPIIsLoaded]);\n  return geocoder;\n};\n\n/**\r\n * Hook to get global map instance\r\n */\nconst useGoogleMap = () => useContext(GoogleMapsContext).map;\n\n/**\r\n * Hook to get Max Zoom Service instance\r\n */\nconst useMaxZoomService = () => {\n  const {\n    googleMapsAPIIsLoaded\n  } = useContext(GoogleMapsContext);\n  // Creates a Max Zoom Service instance\n  const maxZoomService = useMemo(() => {\n    // Wait for Google Maps API to be loaded\n    if (!googleMapsAPIIsLoaded) {\n      return null;\n    }\n    return new google.maps.MaxZoomService();\n  }, [googleMapsAPIIsLoaded]);\n  return maxZoomService;\n};\n\n/**\r\n * Hook to get Google Maps Places Service instance\r\n */\nconst usePlacesService = props => {\n  const {\n    map,\n    googleMapsAPIIsLoaded\n  } = useContext(GoogleMapsContext);\n  const [placesService, setPlacesService] = useState(null);\n  // Creates a Places Service instance\n  useEffect(() => {\n    if (!googleMapsAPIIsLoaded) {\n      return;\n    }\n    if (!google.maps.places) {\n      throw Error(\"Places library missing. Add 'places' to the libraries array of GoogleMapsProvider.\");\n    }\n    // Create places service which renders attributions in the map container\n    if ((props == null ? void 0 : props.divElement) === undefined) {\n      // Wait for map to be initialized\n      if (!map) {\n        return;\n      }\n      const serviceMap = new google.maps.places.PlacesService(map);\n      setPlacesService(serviceMap);\n      return;\n    }\n    // Create places service which renders attributions in the passed div element\n    // Wait for div element to be available\n    if (!(props != null && props.divElement)) {\n      return;\n    }\n    const serviceElement = new google.maps.places.PlacesService(props == null ? void 0 : props.divElement);\n    setPlacesService(serviceElement);\n  }, [googleMapsAPIIsLoaded, map, props == null ? void 0 : props.divElement]);\n  return placesService;\n};\n\n/* eslint-disable complexity */\n/**\r\n * Hook to get Street View Panorama\r\n */\nconst useStreetViewPanorama = props => {\n  const {\n    divElement,\n    position,\n    pov,\n    zoom\n  } = props;\n  const {\n    googleMapsAPIIsLoaded,\n    map\n  } = useContext(GoogleMapsContext);\n  const [streetViewPanorama, setStreetViewPanorama] = useState(null);\n  // Creates a Street View instance\n  useEffect(() => {\n    // If no div element is passed, initialize a map with Street View Panorama\n    if (!divElement) {\n      // Wait for Google Maps map instance\n      if (!map) {\n        return () => {};\n      }\n      const newPanorama = map.getStreetView();\n      if (pov) {\n        newPanorama.setPov(pov);\n      }\n      if (position) {\n        newPanorama.setPosition(position);\n      }\n      // eslint-disable-next-line no-eq-null\n      if (zoom != null) {\n        newPanorama.setZoom(zoom);\n      }\n      setStreetViewPanorama(newPanorama);\n    } else {\n      // Wait for Google Maps API\n      if (!googleMapsAPIIsLoaded) {\n        return () => {};\n      }\n      // If a div element is passed, initialize street view in the element\n      const newPanorama = new google.maps.StreetViewPanorama(divElement, {\n        position,\n        pov,\n        zoom\n      });\n      setStreetViewPanorama(newPanorama);\n    }\n    return () => {\n      if (!divElement && map) {\n        map.setStreetView(null);\n      }\n    };\n  }, [map, divElement]);\n  return streetViewPanorama;\n};\n\nexport { GoogleMapsContext, GoogleMapsProvider, useAutocomplete, useAutocompleteService, useDirectionsService, useDistanceMatrixService, useElevationService, useGeocodingService, useGoogleMap, useMaxZoomService, usePlacesService, useStreetViewPanorama };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}